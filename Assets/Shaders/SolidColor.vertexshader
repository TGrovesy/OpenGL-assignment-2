#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  
// Values that stay constant for the whole mesh.
uniform mat4 viewProjectionMatrix;
uniform mat4 WorldTransform;

uniform vec4 inColour;

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec4 vertexColour;
void main()
{
	// Output position of the vertex, in clip space : MVP * position
	vertexColour = inColour;
	gl_Position =  viewProjectionMatrix * WorldTransform * vec4(vertexPosition_modelspace,1);
	
	normal = vertexNormal_modelspace; // Does this need to be transformed when we pass it to the fragment shader?
}

