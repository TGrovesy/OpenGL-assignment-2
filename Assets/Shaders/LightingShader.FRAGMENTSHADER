#version 330 core

// Ouput to fragment shader
out vec4 FragColour;

in vec4 vertexColour;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec2 vertexUV;

uniform sampler2D textureSampler; //for textureSampler

uniform bool textured;


uniform vec3 objectColour = vec3(1.0);

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material material;

uniform vec3 lightPos;
uniform vec3 viewPos;
in vec3 FragPos;

struct Light{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 position;
};

uniform Light light;

void main()
{
	vec4 textureColour = texture(textureSampler, vertexUV);
	//ambient
	vec3 ambient = material.ambient * light.ambient;
	
	//diffuse
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = (diff * material.diffuse) * light.diffuse;
	
	//specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (spec * material.specular) * light.specular;
	vec3 result;
	if(true){
		result =(ambient + diffuse + specular) * textureColour.xyz;
		//result = textureColour.rgb;
	}else{
		//result = (ambient + diffuse + specular) * vertexColour.rgb;
		result = vertexColour.rgb;
	}
	// set the fragment color to the interpolated vertex color
	FragColour = vec4(result, 1.0f);
}